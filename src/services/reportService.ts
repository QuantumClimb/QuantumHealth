
// Mock PDF data for download (base64 encoded small PDF)
const mockPdfBase64 = `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`;

// Create a mock medical report PDF file
export const createMockReport = (reportName: string) => {
  const byteCharacters = atob(mockPdfBase64);
  const byteNumbers = new Array(byteCharacters.length);
  for (let i = 0; i < byteCharacters.length; i++) {
    byteNumbers[i] = byteCharacters.charCodeAt(i);
  }
  const byteArray = new Uint8Array(byteNumbers);
  const blob = new Blob([byteArray], { type: 'application/pdf' });

  // Create a download link and trigger the download
  const link = document.createElement('a');
  link.href = window.URL.createObjectURL(blob);
  link.download = `${reportName}.pdf`;
  link.click();
};

// Generate mock report for download
export const downloadMockReport = (report: any) => {
  // Simulate loading a report
  return new Promise<void>((resolve) => {
    setTimeout(() => {
      // Create and download the mock report
      createMockReport(report.name || 'medical-report');
      resolve();
    }, 1000);
  });
};
